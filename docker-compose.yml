name: fastapi-dramatiq

services:
  db:
    image: postgres:15
    env_file:
      - .env
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  dramatiq_pg_init:
    image: python:3.11-slim
    env_file:
      - .env
    command: >
      sh -c "
        pip install --no-cache-dir dramatiq-pg==0.12.0 psycopg2-binary==2.9.10 &&
        dramatiq-pg -d postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB} init
      "
    depends_on:
      db:
        condition: service_healthy
    restart: no

  backend:
    build: .
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      dramatiq_pg_init:
        condition: service_completed_successfully
    restart: unless-stopped
    command: ["uvicorn", "app.api:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    develop:
      watch:
        - action: sync
          path: ./app
          target: /app/app
          ignore:
            - .venv
        - path: ./pyproject.toml
          action: rebuild

  worker:
    build: .
    command: ["dramatiq", "app.tasks.jobs", "--processes", "2", "--threads", "4"]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      dramatiq_pg_init:
        condition: service_completed_successfully
    restart: unless-stopped
    develop:
      watch:
        - action: sync+restart
          path: ./app
          target: /app/app
          ignore:
            - .venv
        - path: ./pyproject.toml
          action: rebuild

  scheduler:
    build: .
    command: ["periodiq", "-v", "app.tasks.broker", "app.tasks.scheduled_jobs"]
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      dramatiq_pg_init:
        condition: service_completed_successfully
    restart: unless-stopped

# volumes:
#   postgres_data: